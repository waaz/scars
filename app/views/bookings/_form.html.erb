<%= form_for(@booking, :html => {:id => 'bookingForm', :onSubmit => "return validate_date_fields();" }) do |f| %>
  <% if @booking.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@booking.errors.count, "error") %> prohibited this booking from being saved:</h2>

      <ul>
      <% @booking.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= f.label :date_of_departure, "Departure date:" %>
    <div id = "dod"><%= f.text_field :date_of_departure, :id=>"dodInput" %></div>
  </div>
  <div class="field">
    <%= f.label :date_of_arrival, "Return date:" %>
    <div id = "dor"><%= f.text_field :date_of_arrival, :id=>"dorInput" %></div>
  </div>
  
  <div class="field">
    <%= f.select :collect,[["I want my car delivered",false],["I want to collect My Car",true]] %>
  </div>
  
  
  <div class="field">
	<%= f.label :booking_address, "Booking Address:"%>
	<%= f.text_area :booking_address, :id =>"address", :size =>"25x3"%>
  </div>
  
  <div class="field">
	<%= f.label :booking_postcode, "PostCode:"%>
	<%= f.text_field :booking_postcode, :id =>"postcode", :size =>7%><br/>
  </div><br/>
  
  <div class="field">
	<%= f.label :promocode, "Promocode:"%>
	<%= f.text_field :promocode%><br/>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>

<script language="JavaScript" type="text/javascript">

    window.onload = function(){
    new JsDatePick({
    useMode:2,
    target:"dorInput",
    dateFormat:"%Y-%m-%d",
    yearsRange:[2012,2014]
    });
    new JsDatePick({
    useMode:2,
    target:"dodInput",
    dateFormat:"%Y/%m/%d",
    yearsRange:[2012,2014]
    });
    };

    try{
    var frmvalidator  = new Validator("bookingForm");
    frmvalidator.EnableMsgsTogether();
    frmvalidator.EnableFocusOnError(false);
    frmvalidator.addValidation("postcode","req","Missing \"Postcode\"");
    frmvalidator.addValidation("dodInput","req","Missing \"Departure date\"");
    frmvalidator.addValidation("dorInput","req","Missing \"Return date\"");

    frmvalidator.addValidation("address","req","Missing \"Address\"");
    frmvalidator.addValidation("address","alnum_s","Alphabetic, numeric and space characters only on \"Address\"");


    }
    catch(e)
    {
    e.message;
    }


    function DoCustomDateValidation()
    {
    try {
    var frm = document.forms['bookingForm'];
    var dod = new Date(frm.dodInput.value);
    var dor = new Date(frm.dorInput.value);
    var today = new Date();

    if (dod.getYear()>today.getYear() || dod.getMonth()>today.getMonth() || (dod.getMonth()==today.getMonth() && dod.getDate()<today.getDate())){
    sfm_show_error_msg('Departure date is before today!');
    return false;
    }
    else if(dod.getTime()>dor.getTime())
    {
    sfm_show_error_msg('Departure date is before return date!');
    return false;
    }
    else
    {
    return true;
    }
    }
    catch(e)
    {
    e.message;
    }
    }
    frmvalidator.setAddnlValidationFunction(DoCustomDateValidation);
    function DoCustomPostcodeValidation()
    {
    try {
    var frm = document.forms['bookingForm'];

    var postCodeValue = frm.postcode.value.replace(/\s/g, "");
    postCodeValue = postCodeValue.toUpperCase();
    var matchPostcode = /^((((A[BL]|B[ABDHLNRSTX]?|C[ABFHMORTVW]|D[ADEGHLNTY]|E[HNX]?|F[KY]|G[LUY]?|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]?|M[EKL]?|N[EGNPRW]?|O[LX]|P[AEHLOR]|R[GHM]|S[AEGKLMNOPRSTY]?|T[ADFNQRSW]|UB|W[ADFNRSV]|YO|ZE)[1-9]?[0-9]|((E|N|NW|SE|SW|W)1|EC[1-4]|WC[12])[A-HJKMNPR-Y]|(SW|W)([2-9]|[1-9][0-9])|EC[1-9][0-9])[0-9])[ABD-HJLNP-UW-Z]{2}|GIR0AA)$/.test(postCodeValue);
    if (!matchPostcode){
    sfm_show_error_msg('Invalid Postcode!');
    return false;
    }
    else{
    return true;
    }
    }
    catch(e)
    {
    e.message;
    }
    }
    frmvalidator.setAddnlValidationFunction(DoCustomPostcodeValidation);

</script>

<% end %>
